// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(60)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  address   String   @db.VarChar(400)
  role      Role     @default(NORMAL_USER)
  stores    Store[]  @relation("StoreOwner")
  ratings   Rating[]
  passwordReset Passwordreset?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(60)
  email     String   @unique @db.VarChar(255)
  address   String   @db.VarChar(400)
  ownerId   String   
  owner     User     @relation("StoreOwner", fields: [ownerId], references: [id])
  ratings   Rating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id        Int      @id @default(autoincrement())
  userId    String   
  storeId   Int
  rating    Int      // between 1â€“5
  user      User     @relation(fields: [userId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, storeId]) // A user can only rate a store once
}

enum Role {
  ADMIN
  NORMAL_USER
  STORE_OWNER
}

model Passwordreset {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}
